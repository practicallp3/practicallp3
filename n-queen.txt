# Python3 program to solve N Queen
# Problem using backtracking
global N
N = 4

def printSolution(board):
	for i in range(N):
		for j in range(N):
			print(board[i][j], end = " ")
		print()

# A utility function to check if a queen can
# be placed on board[row][col]. Note that this
# function is called when "col" queens are
# already placed in columns from 0 to col -1.
# So we need to check only left side for
# attacking queens
def isSafe(board, row, col):

	# Check this row on left side
	for i in range(col):
		if board[row][i] == 1:
			return False

	# Check upper diagonal on left side
	for i, j in zip(range(row, -1, -1),
					range(col, -1, -1)):
		if board[i][j] == 1:
			return False

	# Check lower diagonal on left side
	for i, j in zip(range(row, N, 1),
					range(col, -1, -1)):
		if board[i][j] == 1:
			return False

	return True

def solveNQUtil(board, col):
	
	# base case: If all queens are placed
	# then return true
	if col >= N:
		return True

	# Consider this column and try placing
	# this queen in all rows one by one
	for i in range(N):

		if isSafe(board, i, col):
			
			# Place this queen in board[i][col]
			board[i][col] = 1

			# recur to place rest of the queens
			if solveNQUtil(board, col + 1) == True:
				return True

			# If placing queen in board[i][col
			# doesn't lead to a solution, then
			# queen from board[i][col]
			board[i][col] = 0

	# if the queen can not be placed in any row in
	# this column col then return false
	return False

# This function solves the N Queen problem using
# Backtracking. It mainly uses solveNQUtil() to
# solve the problem. It returns false if queens
# cannot be placed, otherwise return true and
# placement of queens in the form of 1s.
# note that there may be more than one
# solutions, this function prints one of the
# feasible solutions.
def solveNQ():
	board = [ [0, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 0],
			[0, 0, 0, 0] ]

	if solveNQUtil(board, 0) == False:
		print ("Solution does not exist")
		return False

	printSolution(board)
	return True

# Driver Code
solveNQ()

/* C program to solve N Queen Problem using
backtracking */
#define N 4
#include <stdbool.h>
#include <stdio.h>

/* A utility function to print solution */
void printSolution(int board[N][N])
{
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++)
			printf(" %d ", board[i][j]);
		printf("\n");
	}
}

/* A utility function to check if a queen can
be placed on board[row][col]. Note that this
function is called when "col" queens are
already placed in columns from 0 to col -1.
So we need to check only left side for
attacking queens */
bool isSafe(int board[N][N], int row, int col)
{
	int i, j;

	/* Check this row on left side */
	for (i = 0; i < col; i++)
		if (board[row][i])
			return false;

	/* Check upper diagonal on left side */
	for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
		if (board[i][j])
			return false;

	/* Check lower diagonal on left side */
	for (i = row, j = col; j >= 0 && i < N; i++, j--)
		if (board[i][j])
			return false;

	return true;
}

/* A recursive utility function to solve N
Queen problem */
bool solveNQUtil(int board[N][N], int col)
{
	/* base case: If all queens are placed
	then return true */
	if (col >= N)
		return true;

	/* Consider this column and try placing
	this queen in all rows one by one */
	for (int i = 0; i < N; i++) {
		/* Check if the queen can be placed on
		board[i][col] */
		if (isSafe(board, i, col)) {
			/* Place this queen in board[i][col] */
			board[i][col] = 1;

			/* recur to place rest of the queens */
			if (solveNQUtil(board, col + 1))
				return true;

			/* If placing queen in board[i][col]
			doesn't lead to a solution, then
			remove queen from board[i][col] */
			board[i][col] = 0; // BACKTRACK
		}
	}

	/* If the queen cannot be placed in any row in
		this column col then return false */
	return false;
}

/* This function solves the N Queen problem using
Backtracking. It mainly uses solveNQUtil() to
solve the problem. It returns false if queens
cannot be placed, otherwise, return true and
prints placement of queens in the form of 1s.
Please note that there may be more than one
solutions, this function prints one of the
feasible solutions.*/
bool solveNQ()
{
	int board[N][N] = { { 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 } };

	if (solveNQUtil(board, 0) == false) {
		printf("Solution does not exist");
		return false;
	}

	printSolution(board);
	return true;
}

// driver program to test above function
int main()
{
	solveNQ();
	return 0;
}


/* C++ program to solve N Queen Problem using
backtracking */

#include <bits/stdc++.h>
#define N 4
using namespace std;

/* A utility function to print solution */
void printSolution(int board[N][N])
{
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++)
			cout << " " << board[i][j] << " ";
		printf("\n");
	}
}

/* A utility function to check if a queen can
be placed on board[row][col]. Note that this
function is called when "col" queens are
already placed in columns from 0 to col -1.
So we need to check only left side for
attacking queens */
bool isSafe(int board[N][N], int row, int col)
{
	int i, j;

	/* Check this row on left side */
	for (i = 0; i < col; i++)
		if (board[row][i])
			return false;

	/* Check upper diagonal on left side */
	for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
		if (board[i][j])
			return false;

	/* Check lower diagonal on left side */
	for (i = row, j = col; j >= 0 && i < N; i++, j--)
		if (board[i][j])
			return false;

	return true;
}

/* A recursive utility function to solve N
Queen problem */
bool solveNQUtil(int board[N][N], int col)
{
	/* base case: If all queens are placed
	then return true */
	if (col >= N)
		return true;

	/* Consider this column and try placing
	this queen in all rows one by one */
	for (int i = 0; i < N; i++) {
		/* Check if the queen can be placed on
		board[i][col] */
		if (isSafe(board, i, col)) {
			/* Place this queen in board[i][col] */
			board[i][col] = 1;

			/* recur to place rest of the queens */
			if (solveNQUtil(board, col + 1))
				return true;

			/* If placing queen in board[i][col]
			doesn't lead to a solution, then
			remove queen from board[i][col] */
			board[i][col] = 0; // BACKTRACK
		}
	}

	/* If the queen cannot be placed in any row in
		this column col then return false */
	return false;
}

/* This function solves the N Queen problem using
Backtracking. It mainly uses solveNQUtil() to
solve the problem. It returns false if queens
cannot be placed, otherwise, return true and
prints placement of queens in the form of 1s.
Please note that there may be more than one
solutions, this function prints one of the
feasible solutions.*/
bool solveNQ()
{
	int board[N][N] = { { 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 } };

	if (solveNQUtil(board, 0) == false) {
		cout << "Solution does not exist";
		return false;
	}

	printSolution(board);
	return true;
}

// driver program to test above function
int main()
{
	solveNQ();
	return 0;
}


""" Python3 program to solve N Queen Problem
using Branch or Bound """

N = 8

""" A utility function to print solution """
def printSolution(board):
	for i in range(N):
		for j in range(N):
			print(board[i][j], end = " ")
		print()

""" A Optimized function to check if
a queen can be placed on board[row][col] """
def isSafe(row, col, slashCode, backslashCode,
		rowLookup, slashCodeLookup,
					backslashCodeLookup):
	if (slashCodeLookup[slashCode[row][col]] or
		backslashCodeLookup[backslashCode[row][col]] or
		rowLookup[row]):
		return False
	return True

""" A recursive utility function
to solve N Queen problem """
def solveNQueensUtil(board, col, slashCode, backslashCode,
					rowLookup, slashCodeLookup,
					backslashCodeLookup):
						
	""" base case: If all queens are
	placed then return True """
	if(col >= N):
		return True
	for i in range(N):
		if(isSafe(i, col, slashCode, backslashCode,
				rowLookup, slashCodeLookup,
				backslashCodeLookup)):
					
			""" Place this queen in board[i][col] """
			board[i][col] = 1
			rowLookup[i] = True
			slashCodeLookup[slashCode[i][col]] = True
			backslashCodeLookup[backslashCode[i][col]] = True
			
			""" recur to place rest of the queens """
			if(solveNQueensUtil(board, col + 1,
								slashCode, backslashCode,
								rowLookup, slashCodeLookup,
								backslashCodeLookup)):
				return True
			
			""" If placing queen in board[i][col]
			doesn't lead to a solution,then backtrack """
			
			""" Remove queen from board[i][col] """
			board[i][col] = 0
			rowLookup[i] = False
			slashCodeLookup[slashCode[i][col]] = False
			backslashCodeLookup[backslashCode[i][col]] = False
			
	""" If queen can not be place in any row in
	this column col then return False """
	return False

""" This function solves the N Queen problem using
Branch or Bound. It mainly uses solveNQueensUtil()to
solve the problem. It returns False if queens
cannot be placed,otherwise return True or
prints placement of queens in the form of 1s.
Please note that there may be more than one
solutions,this function prints one of the
feasible solutions."""
def solveNQueens():
	board = [[0 for i in range(N)]
				for j in range(N)]
	
	# helper matrices
	slashCode = [[0 for i in range(N)]
					for j in range(N)]
	backslashCode = [[0 for i in range(N)]
						for j in range(N)]
	
	# arrays to tell us which rows are occupied
	rowLookup = [False] * N
	
	# keep two arrays to tell us
	# which diagonals are occupied
	x = 2 * N - 1
	slashCodeLookup = [False] * x
	backslashCodeLookup = [False] * x
	
	# initialize helper matrices
	for rr in range(N):
		for cc in range(N):
			slashCode[rr][cc] = rr + cc
			backslashCode[rr][cc] = rr - cc + 7
	
	if(solveNQueensUtil(board, 0, slashCode, backslashCode,
						rowLookup, slashCodeLookup,
						backslashCodeLookup) == False):
		print("Solution does not exist")
		return False
		
	# solution found
	printSolution(board)
	return True

# Driver Code
solveNQueens()


/* C++ program to solve N Queen Problem using Branch
and Bound */
#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#define N 8

/* A utility function to print solution */
void printSolution(int board[N][N])
{
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
			printf("%2d ", board[i][j]);
		printf("\n");
	}
}

/* A Optimized function to check if a queen can
be placed on board[row][col] */
bool isSafe(int row, int col, int slashCode[N][N],
			int backslashCode[N][N], bool rowLookup[],
	bool slashCodeLookup[], bool backslashCodeLookup[] )
{
	if (slashCodeLookup[slashCode[row][col]] ||
		backslashCodeLookup[backslashCode[row][col]] ||
		rowLookup[row])
	return false;

	return true;
}

/* A recursive utility function
to solve N Queen problem */
bool solveNQueensUtil(int board[N][N], int col,
	int slashCode[N][N], int backslashCode[N][N],
								bool rowLookup[N],
							bool slashCodeLookup[],
						bool backslashCodeLookup[] )
{
	/* base case: If all queens are placed
	then return true */
	if (col >= N)
		return true;

	/* Consider this column and try placing
	this queen in all rows one by one */
	for (int i = 0; i < N; i++)
	{
		/* Check if queen can be placed on
		board[i][col] */
		if ( isSafe(i, col, slashCode,
					backslashCode, rowLookup,
		slashCodeLookup, backslashCodeLookup) )
		{
			/* Place this queen in board[i][col] */
			board[i][col] = 1;
			rowLookup[i] = true;
			slashCodeLookup[slashCode[i][col]] = true;
			backslashCodeLookup[backslashCode[i][col]] = true;

			/* recur to place rest of the queens */
			if ( solveNQueensUtil(board, col + 1,
								slashCode, backslashCode,
			rowLookup, slashCodeLookup, backslashCodeLookup) )
				return true;

			/* If placing queen in board[i][col]
			doesn't lead to a solution, then backtrack */

			/* Remove queen from board[i][col] */
			board[i][col] = 0;
			rowLookup[i] = false;
			slashCodeLookup[slashCode[i][col]] = false;
			backslashCodeLookup[backslashCode[i][col]] = false;
		}
	}

	/* If queen can not be place in any row in
		this column col then return false */
	return false;
}

/* This function solves the N Queen problem using
Branch and Bound. It mainly uses solveNQueensUtil() to
solve the problem. It returns false if queens
cannot be placed, otherwise return true and
prints placement of queens in the form of 1s.
Please note that there may be more than one
solutions, this function prints one of the
feasible solutions.*/
bool solveNQueens()
{
	int board[N][N];
	memset(board, 0, sizeof board);

	// helper matrices
	int slashCode[N][N];
	int backslashCode[N][N];

	// arrays to tell us which rows are occupied
	bool rowLookup[N] = {false};

	//keep two arrays to tell us
	// which diagonals are occupied
	bool slashCodeLookup[2*N - 1] = {false};
	bool backslashCodeLookup[2*N - 1] = {false};

	// initialize helper matrices
	for (int r = 0; r < N; r++)
		for (int c = 0; c < N; c++) {
		slashCode[r] = r + c,
			backslashCode[r] = r - c + 7;
		}

	if (solveNQueensUtil(board, 0,
						slashCode, backslashCode,
	rowLookup, slashCodeLookup, backslashCodeLookup) ==
												false )
	{
		printf("Solution does not exist");
		return false;
	}

	// solution found
	printSolution(board);
	return true;
}

// Driver program to test above function
int main()
{
	solveNQueens();

	return 0;
}


#include<bits/stdc++.h>
using namespace std;
int N;


// function for printing the solution
void printSol(vector<vector<int>>board)
{
for(int i = 0;i<N;i++){
	for(int j = 0;j<N;j++){
		cout<<board[i][j]<<" ";
	}
	cout<<"\n";
}
}

/* Optimized isSafe function
isSafe function to check if current row contains or current left diagonal or current right diagonal contains any queen or not if
yes return false
else return true
*/

bool isSafe(int row ,int col ,vector<bool>rows , vector<bool>left_digonals ,vector<bool>Right_digonals)
{
	
if(rows[row] == true || left_digonals[row+col] == true || Right_digonals[col-row+N-1] == true){
	return false;
}

return true;
}

// Recursive function to solve N-queen Problem
bool solve(vector<vector<int>>& board ,int col ,vector<bool>rows , vector<bool>left_digonals ,vector<bool>Right_digonals)
{	
	// base Case : If all Queens are placed
	if(col>=N){
		return true;
	}

	/* Consider this Column and move in all rows one by one */
	for(int i = 0;i<N;i++)
	{
		if(isSafe(i,col,rows,left_digonals,Right_digonals) == true)
		{
			rows[i] = true;
			left_digonals[i+col] = true;
			Right_digonals[col-i+N-1] = true;
			board[i][col] = 1; // placing the Queen in board[i][col]
				
				/* recur to place rest of the queens */

			if(solve(board,col+1,rows,left_digonals,Right_digonals) == true){
				return true;
			}
				
			// Backtracking
			rows[i] = false;
			left_digonals[i+col] = false;
			Right_digonals[col-i+N-1] = false;
			board[i][col] = 0; // removing the Queen from board[i][col]

		}
	}

		return false;
}


int main()
{
// Taking input from the user

cout<<"Enter the no of rows for the square Board : ";
cin>>N;


// board of size N*N
vector<vector<int>>board(N,vector<int>(N,0));


	// array to tell which rows are occupied
vector<bool>rows(N,false);		

// arrays to tell which diagonals are occupied					
vector<bool>left_digonals(2*N-1,false);
vector<bool>Right_digonals(2*N-1,false);


bool ans = solve(board , 0, rows,left_digonals,Right_digonals);

if(ans == true){

	// printing the solution Board
	printSol(board);
}
else{
	cout<<"Solution Does not Exist\n";
}
}

